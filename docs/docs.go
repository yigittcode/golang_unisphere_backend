// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://www.unisphere.com/support",
            "email": "support@unisphere.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get profile information for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "Profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access and refresh tokens using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh authentication token",
                "parameters": [
                    {
                        "description": "Refresh token information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register-instructor": {
            "post": {
                "description": "Create a new instructor account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new instructor",
                "parameters": [
                    {
                        "description": "Instructor registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterInstructorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instructor successfully registered",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register-student": {
            "post": {
                "description": "Create a new student account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new student",
                "parameters": [
                    {
                        "description": "Student registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterStudentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Student successfully registered",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email or student ID already in use",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/departments": {
            "get": {
                "description": "Get a list of all departments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get all departments",
                "responses": {
                    "200": {
                        "description": "Departments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new department with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Create a new department",
                "parameters": [
                    {
                        "description": "Department information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Department successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Department already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/departments/{id}": {
            "get": {
                "description": "Get department information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get department by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a department with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Update a department",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated department information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department successfully updated",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a department by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Delete a department",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete department with associated data",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculties": {
            "get": {
                "description": "Get a list of all faculties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Get all faculties",
                "responses": {
                    "200": {
                        "description": "Faculties retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new faculty with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Create a new faculty",
                "parameters": [
                    {
                        "description": "Faculty information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Faculty"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Faculty successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Faculty already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculties/{id}": {
            "get": {
                "description": "Get faculty information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Get faculty by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a faculty with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Update a faculty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated faculty information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Faculty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty successfully updated",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a faculty by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Delete a faculty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete faculty with associated departments",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculty-departments/{facultyId}": {
            "get": {
                "description": "Get a list of departments for a specific faculty",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get departments by faculty ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "facultyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Departments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pastexams": {
            "get": {
                "description": "Get a list of all past exams with optional filtering and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Get all past exams",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by faculty ID",
                        "name": "facultyId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by department ID",
                        "name": "departmentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by course code",
                        "name": "courseCode",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by term (FALL or SPRING)",
                        "name": "term",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (default: createdAt)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC, default: DESC)",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (0-based, default: 0)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 10)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exams retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new past exam with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Create a new past exam",
                "parameters": [
                    {
                        "description": "Past exam information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePastExamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Past exam successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied or not an instructor",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pastexams/{id}": {
            "get": {
                "description": "Get past exam information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Get past exam by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a past exam with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Update a past exam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated past exam information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePastExamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam successfully updated",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied or not an instructor",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a past exam by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Delete a past exam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied or not an instructor",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-04-23T12:01:05.123Z"
                }
            }
        },
        "dto.CreatePastExamRequest": {
            "type": "object",
            "required": [
                "content",
                "courseCode",
                "departmentId",
                "term",
                "title",
                "year"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "courseCode": {
                    "type": "string"
                },
                "departmentId": {
                    "type": "integer",
                    "minimum": 1
                },
                "fileUrl": {
                    "type": "string"
                },
                "term": {
                    "type": "string",
                    "enum": [
                        "FALL",
                        "SPRING"
                    ]
                },
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "maximum": 2100,
                    "minimum": 1900
                }
            }
        },
        "dto.ErrorCode": {
            "type": "string",
            "enum": [
                "AUTH_001",
                "AUTH_002",
                "AUTH_003",
                "AUTH_004",
                "AUTH_005",
                "AUTH_006",
                "AUTH_007",
                "AUTH_008",
                "RES_001",
                "RES_002",
                "RES_003",
                "VAL_001",
                "SRV_001",
                "SRV_002",
                "SRV_003"
            ],
            "x-enum-varnames": [
                "ErrorCodeInvalidCredentials",
                "ErrorCodeInvalidEmail",
                "ErrorCodeInvalidPassword",
                "ErrorCodeInvalidStudentID",
                "ErrorCodeInvalidToken",
                "ErrorCodeExpiredToken",
                "ErrorCodeTokenNotFound",
                "ErrorCodeUnauthorized",
                "ErrorCodeResourceNotFound",
                "ErrorCodeResourceAlreadyExists",
                "ErrorCodeResourceInvalid",
                "ErrorCodeValidationFailed",
                "ErrorCodeInternalServer",
                "ErrorCodeDatabaseError",
                "ErrorCodeExternalServiceError"
            ]
        },
        "dto.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ErrorCode"
                        }
                    ],
                    "example": "AUTH_001"
                },
                "debugInfo": {
                    "type": "string"
                },
                "details": {},
                "field": {
                    "type": "string",
                    "example": "email"
                },
                "message": {
                    "type": "string",
                    "example": "Email format is invalid, school email required"
                },
                "severity": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ErrorSeverity"
                        }
                    ],
                    "example": "ERROR"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorDetail"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-04-23T12:01:05.123Z"
                }
            }
        },
        "dto.ErrorSeverity": {
            "type": "string",
            "enum": [
                "INFO",
                "WARNING",
                "ERROR",
                "CRITICAL"
            ],
            "x-enum-varnames": [
                "ErrorSeverityInfo",
                "ErrorSeverityWarning",
                "ErrorSeverityError",
                "ErrorSeverityCritical"
            ]
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@school.edu.tr"
                },
                "password": {
                    "type": "string",
                    "example": "Password123"
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "example": "62a71580-9d9e-4884-a000-5dc497a3d1d8"
                }
            }
        },
        "dto.RegisterInstructorRequest": {
            "type": "object",
            "required": [
                "departmentId",
                "email",
                "firstName",
                "lastName",
                "password",
                "title"
            ],
            "properties": {
                "departmentId": {
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "type": "string",
                    "example": "instructor@school.edu.tr"
                },
                "firstName": {
                    "type": "string",
                    "example": "Jane"
                },
                "lastName": {
                    "type": "string",
                    "example": "Smith"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Password123"
                },
                "title": {
                    "type": "string",
                    "example": "Professor"
                }
            }
        },
        "dto.RegisterStudentRequest": {
            "type": "object",
            "required": [
                "departmentId",
                "email",
                "firstName",
                "lastName",
                "password",
                "studentId"
            ],
            "properties": {
                "departmentId": {
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "type": "string",
                    "example": "student@school.edu.tr"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "graduationYear": {
                    "type": "integer",
                    "example": 2025
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Password123"
                },
                "studentId": {
                    "type": "string",
                    "example": "12345678"
                }
            }
        },
        "dto.UpdatePastExamRequest": {
            "type": "object",
            "required": [
                "content",
                "courseCode",
                "departmentId",
                "term",
                "title",
                "year"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "courseCode": {
                    "type": "string"
                },
                "departmentId": {
                    "type": "integer",
                    "minimum": 1
                },
                "fileUrl": {
                    "type": "string"
                },
                "term": {
                    "type": "string",
                    "enum": [
                        "FALL",
                        "SPRING"
                    ]
                },
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "maximum": 2100,
                    "minimum": 1900
                }
            }
        },
        "models.Department": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "faculty": {
                    "$ref": "#/definitions/models.Faculty"
                },
                "faculty_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Faculty": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT token for authorization",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "UniSphere API",
	Description:      "API for UniSphere university social platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
