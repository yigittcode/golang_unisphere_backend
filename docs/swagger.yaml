basePath: /api/v1
definitions:
  github_com_yigit_unisphere_internal_app_models_dto.APIResponse:
    properties:
      data:
        description: Use specific DTOs for data structure
      error:
        allOf:
        - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorDetail'
        description: Include error details if Success is false
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        description: Timestamp of the response
        example: "2025-04-23T12:01:05.123Z"
        type: string
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.ClassNoteListResponse:
    properties:
      notes:
        description: List of class note details for the current page
        items:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PaginationInfo'
        description: Pagination metadata
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse:
    properties:
      content:
        description: Main content of the note
        example: Detailed notes covering topic X...
        type: string
      courseCode:
        description: Course code
        example: CENG304
        type: string
      createdAt:
        description: Timestamp when the note was created
        example: "2024-01-15T10:00:00Z"
        type: string
      departmentId:
        description: ID of the department for the course
        example: 1
        type: integer
      departmentName:
        description: Name of the department
        example: Computer Engineering
        type: string
      facultyId:
        description: ID of the faculty associated with the department
        example: 1
        type: integer
      facultyName:
        description: Name of the faculty
        example: Engineering Faculty
        type: string
      id:
        description: Unique identifier for the class note
        example: 15
        type: integer
      image:
        description: Optional URL to an associated image
        example: http://example.com/image.jpg
        type: string
      term:
        description: Term (FALL or SPRING)
        example: SPRING
        type: string
      title:
        description: Title of the class note
        example: Lecture Notes - Week 5
        type: string
      updatedAt:
        description: Timestamp when the note was last updated
        example: "2024-01-16T11:30:00Z"
        type: string
      uploadedByStudent:
        description: True if uploaded by a student, false if by an instructor
        example: true
        type: boolean
      uploaderEmail:
        description: Email of the user who uploaded the note
        example: john.doe@example.com
        type: string
      uploaderName:
        description: Name of the user who uploaded the note
        example: John Doe
        type: string
      year:
        description: Year the note corresponds to
        example: 2024
        type: integer
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.ErrorCode:
    enum:
    - AUTH_001
    - AUTH_002
    - AUTH_003
    - AUTH_004
    - AUTH_005
    - AUTH_006
    - AUTH_007
    - AUTH_008
    - RES_001
    - RES_002
    - RES_003
    - VAL_001
    - SRV_001
    - SRV_002
    - SRV_003
    - BAD_REQUEST
    - FORBIDDEN
    type: string
    x-enum-varnames:
    - ErrorCodeInvalidCredentials
    - ErrorCodeInvalidEmail
    - ErrorCodeInvalidPassword
    - ErrorCodeInvalidStudentID
    - ErrorCodeInvalidToken
    - ErrorCodeExpiredToken
    - ErrorCodeTokenNotFound
    - ErrorCodeUnauthorized
    - ErrorCodeResourceNotFound
    - ErrorCodeResourceAlreadyExists
    - ErrorCodeResourceInvalid
    - ErrorCodeValidationFailed
    - ErrorCodeInternalServer
    - ErrorCodeDatabaseError
    - ErrorCodeExternalServiceError
    - ErrorCodeBadRequest
    - ErrorCodeForbidden
  github_com_yigit_unisphere_internal_app_models_dto.ErrorDetail:
    properties:
      code:
        allOf:
        - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorCode'
        example: AUTH_001
      debugInfo:
        type: string
      details: {}
      field:
        example: email
        type: string
      message:
        example: Email format is invalid, school email required
        type: string
      severity:
        allOf:
        - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorSeverity'
        example: ERROR
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorDetail'
      success:
        example: false
        type: boolean
      timestamp:
        example: "2025-04-23T12:01:05.123Z"
        type: string
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.ErrorSeverity:
    enum:
    - INFO
    - WARNING
    - ERROR
    - CRITICAL
    type: string
    x-enum-varnames:
    - ErrorSeverityInfo
    - ErrorSeverityWarning
    - ErrorSeverityError
    - ErrorSeverityCritical
  github_com_yigit_unisphere_internal_app_models_dto.LoginRequest:
    properties:
      email:
        description: User's registered email address
        example: user@school.edu.tr
        type: string
      password:
        description: User's password
        example: Password123
        type: string
    required:
    - email
    - password
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.PaginationInfo:
    properties:
      currentPage:
        description: Current page number (0-based)
        example: 0
        type: integer
      pageSize:
        description: Number of items per page
        example: 10
        type: integer
      totalItems:
        description: Total number of items matching the query
        example: 48
        type: integer
      totalPages:
        description: Total number of pages available
        example: 5
        type: integer
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.PastExamListResponse:
    properties:
      exams:
        description: List of past exam details for the current page
        items:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PastExamResponse'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PaginationInfo'
        description: Pagination metadata
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.PastExamResponse:
    properties:
      content:
        description: Detailed content or description of the exam
        example: Exam content details...
        type: string
      courseCode:
        description: Course code
        example: CENG301
        type: string
      departmentId:
        description: ID of the department for the course
        example: 1
        type: integer
      departmentName:
        description: Name of the department
        example: Computer Engineering
        type: string
      facultyId:
        description: ID of the faculty associated with the department
        example: 1
        type: integer
      facultyName:
        description: Name of the faculty
        example: Engineering Faculty
        type: string
      fileUrl:
        description: URL to the exam file, if available
        example: http://example.com/exam.pdf
        type: string
      id:
        description: Unique identifier for the past exam
        example: 10
        type: integer
      instructorName:
        description: Name of the instructor who uploaded the exam
        example: Jane Smith
        type: string
      term:
        description: Term the exam was held (FALL or SPRING)
        example: FALL
        type: string
      title:
        description: Title of the exam
        example: Midterm 1
        type: string
      uploadedByEmail:
        description: Email of the instructor who uploaded the exam
        example: instructor@school.edu.tr
        type: string
      year:
        description: Year the exam was held
        example: 2023
        type: integer
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.RefreshTokenRequest:
    properties:
      refreshToken:
        description: The refresh token obtained during login
        example: your_refresh_token_here
        type: string
    required:
    - refreshToken
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.RegisterInstructorRequest:
    properties:
      departmentId:
        description: ID of the department the instructor belongs to
        example: 1
        type: integer
      email:
        description: Instructor's email address (must be unique)
        example: instructor@school.edu.tr
        type: string
      firstName:
        description: Instructor's first name
        example: Jane
        type: string
      lastName:
        description: Instructor's last name
        example: Smith
        type: string
      password:
        description: Instructor's password (min 8 characters, letter+number required
          by service)
        example: Password123
        minLength: 8
        type: string
      title:
        description: Instructor's academic title (e.g., Professor, Dr.)
        example: Professor
        type: string
    required:
    - departmentId
    - email
    - firstName
    - lastName
    - password
    - title
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.RegisterStudentRequest:
    properties:
      departmentId:
        description: ID of the department the student belongs to
        example: 1
        type: integer
      email:
        description: Student's email address (must be unique)
        example: student@school.edu.tr
        type: string
      firstName:
        description: Student's first name
        example: John
        type: string
      graduationYear:
        description: Student's expected graduation year (optional)
        example: 2025
        minimum: 1900
        type: integer
      lastName:
        description: Student's last name
        example: Doe
        type: string
      password:
        description: Student's password (min 8 characters, letter+number required
          by service)
        example: Password123
        minLength: 8
        type: string
      studentId:
        description: Student's unique 8-digit ID
        example: "12345678"
        type: string
    required:
    - departmentId
    - email
    - firstName
    - lastName
    - password
    - studentId
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.SuccessResponse:
    properties:
      message:
        example: Resource deleted successfully
        type: string
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.UpdateTitleRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.UpdateUserProfileRequest:
    properties:
      email:
        example: john.doe@school.edu.tr
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
    required:
    - email
    - firstName
    - lastName
    type: object
  github_com_yigit_unisphere_internal_app_models_dto.UserProfile:
    properties:
      departmentId:
        description: ID of the user's department
        example: 1
        type: integer
      departmentName:
        description: Name of the user's department
        example: Computer Engineering
        type: string
      email:
        description: User's email address
        example: user@school.edu.tr
        type: string
      facultyId:
        description: ID of the user's faculty
        example: 1
        type: integer
      facultyName:
        description: Name of the user's faculty
        example: Engineering Faculty
        type: string
      firstName:
        description: User's first name
        example: John
        type: string
      graduationYear:
        description: Student's expected graduation year (optional, only for students)
        example: 2025
        type: integer
      id:
        description: Unique identifier for the user
        example: 1
        type: integer
      identifier:
        description: Student or instructor specific fields
        example: "12345678"
        type: string
      lastName:
        description: User's last name
        example: Doe
        type: string
      profilePhotoFileId:
        description: ID of the user's profile photo file (null if not set)
        example: 123
        type: integer
      roleType:
        description: User's role (STUDENT or INSTRUCTOR)
        enum:
        - STUDENT
        - INSTRUCTOR
        example: STUDENT
        type: string
      title:
        description: Instructor's academic title (only for instructors)
        example: Professor
        type: string
    type: object
  models.Department:
    properties:
      code:
        description: Unique code for the department (e.g., CENG, EEE, MATH)
        example: CENG
        type: string
      faculty:
        allOf:
        - $ref: '#/definitions/models.Faculty'
        description: Associated faculty details (populated in some responses)
      faculty_id:
        description: ID of the faculty this department belongs to (required)
        example: 1
        type: integer
      id:
        description: Unique identifier for the department
        example: 1
        type: integer
      name:
        description: Name of the department (required)
        example: Computer Engineering
        type: string
    required:
    - code
    - faculty_id
    - name
    type: object
  models.Faculty:
    properties:
      code:
        description: Unique code for the faculty (e.g., ENG, SCI)
        example: ENG
        type: string
      description:
        description: Optional description of the faculty
        example: Faculty of Engineering and Natural Sciences
        type: string
      id:
        description: Unique identifier for the faculty
        example: 1
        type: integer
      name:
        description: Name of the faculty (required)
        example: Engineering Faculty
        type: string
    required:
    - code
    - name
    type: object
  models.Instructor:
    properties:
      department:
        allOf:
        - $ref: '#/definitions/models.Department'
        description: Relation, no db tag
      departmentId:
        type: integer
      id:
        type: integer
      title:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relation, no db tag
      userId:
        type: integer
    type: object
  models.RoleType:
    enum:
    - STUDENT
    - INSTRUCTOR
    type: string
    x-enum-comments:
      RoleInstructor: Original name
      RoleStudent: Original name
    x-enum-varnames:
    - RoleStudent
    - RoleInstructor
  models.User:
    properties:
      createdAt:
        description: Timestamp when the user was created
        example: "2024-01-01T10:00:00Z"
        type: string
      departmentId:
        description: User's department (nullable)
        example: 1
        type: integer
      email:
        description: User's email address
        example: user@school.edu.tr
        type: string
      firstName:
        description: User's first name
        example: John
        type: string
      id:
        description: Unique identifier for the user
        example: 1
        type: integer
      isActive:
        description: Whether the user account is active
        example: true
        type: boolean
      lastLoginAt:
        description: Timestamp of the last login (nullable)
        example: "2024-04-20T18:00:00Z"
        type: string
      lastName:
        description: User's last name
        example: Doe
        type: string
      profilePhotoFileId:
        description: Profile photo file ID (nullable)
        type: integer
      roleType:
        allOf:
        - $ref: '#/definitions/models.RoleType'
        description: User's role (STUDENT or INSTRUCTOR)
        example: STUDENT
      updatedAt:
        description: Timestamp when the user was last updated
        example: "2024-01-02T15:30:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@unisphere.com
    name: API Support
    url: https://www.unisphere.com/support
  description: API for UniSphere university social platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: UniSphere API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/profile:
    get:
      description: Get profile information for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UserProfile'
              type: object
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
    put:
      consumes:
      - application/json
      description: Update profile information for authenticated user (name, email)
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UserProfile'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /auth/profile/photo:
    delete:
      description: Remove a user's profile photo
      produces:
      - application/json
      responses:
        "200":
          description: Profile photo deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UserProfile'
              type: object
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete profile photo
      tags:
      - auth
    post:
      consumes:
      - multipart/form-data
      description: Upload or update a user's profile photo
      parameters:
      - description: Profile photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile photo updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UserProfile'
              type: object
        "400":
          description: Invalid file format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update profile photo
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using refresh token
      parameters:
      - description: Refresh token information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Refresh authentication token
      tags:
      - auth
  /auth/register-instructor:
    post:
      consumes:
      - application/json
      description: Create a new instructor account
      parameters:
      - description: Instructor registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.RegisterInstructorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Instructor successfully registered
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Email already in use
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Register a new instructor
      tags:
      - auth
  /auth/register-student:
    post:
      consumes:
      - application/json
      description: Create a new student account
      parameters:
      - description: Student registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.RegisterStudentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Student successfully registered
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Email or student ID already in use
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Register a new student
      tags:
      - auth
  /class-notes:
    get:
      consumes:
      - application/json
      description: Retrieves a list of class notes with optional filtering and pagination.
      parameters:
      - description: Filter by Faculty ID
        example: 1
        in: query
        name: facultyId
        type: integer
      - description: Filter by Department ID
        example: 1
        in: query
        name: departmentId
        type: integer
      - description: Filter by Course Code
        example: CENG304
        in: query
        name: courseCode
        type: string
      - description: Filter by Year
        example: 2024
        in: query
        name: year
        type: integer
      - description: Filter by Term (FALL or SPRING)
        example: SPRING
        in: query
        name: term
        type: string
      - default: createdAt
        description: Sort field (createdAt, year, term, courseCode, title)
        in: query
        name: sortBy
        type: string
      - default: DESC
        description: Sort order (ASC or DESC)
        in: query
        name: sortOrder
        type: string
      - default: 0
        description: Page number (0-based)
        in: query
        minimum: 0
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Class notes retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteListResponse'
              type: object
        "400":
          description: Bad Request (e.g., invalid query parameters)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get all class notes
      tags:
      - ClassNotes
    post:
      consumes:
      - multipart/form-data
      description: Adds a new class note to the system. Requires authentication. Supports
        optional image upload.
      parameters:
      - description: Year
        example: 2024
        in: formData
        name: year
        required: true
        type: integer
      - description: Term (FALL or SPRING)
        example: SPRING
        in: formData
        name: term
        required: true
        type: string
      - description: Department ID
        example: 1
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: Course Code
        example: CENG304
        in: formData
        name: courseCode
        required: true
        type: string
      - description: Title
        example: '"Lecture Notes - Week 5"'
        in: formData
        name: title
        required: true
        type: string
      - description: Content
        example: '"Detailed notes covering topic X..."'
        in: formData
        name: content
        required: true
        type: string
      - description: Optional image file (jpg, png, gif)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Class note created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse'
              type: object
        "400":
          description: Bad Request (e.g., validation errors)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new class note
      tags:
      - ClassNotes
  /class-notes/{noteId}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing class note. Requires authentication and ownership.
      parameters:
      - description: Class Note ID to delete
        example: 15
        format: int64
        in: path
        name: noteId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Class note deleted successfully" // Changed data type
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.SuccessResponse'
              type: object
        "400":
          description: Bad Request (e.g., invalid ID)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized (handled by middleware)" // Middleware should
            handle this
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden (not owner)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a class note
      tags:
      - ClassNotes
    get:
      consumes:
      - application/json
      description: Retrieves a specific class note by its ID.
      parameters:
      - description: Class Note ID
        example: 15
        format: int64
        in: path
        name: noteId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Class note retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse'
              type: object
        "400":
          description: Bad Request (e.g., invalid ID)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get class note by ID
      tags:
      - ClassNotes
    put:
      consumes:
      - multipart/form-data
      description: Updates an existing class note. Requires authentication and ownership.
        Supports optional image upload (replaces existing).
      parameters:
      - description: Class Note ID to update
        example: 15
        format: int64
        in: path
        name: noteId
        required: true
        type: integer
      - description: Year
        example: 2024
        in: formData
        name: year
        required: true
        type: integer
      - description: Term (FALL or SPRING)
        example: SPRING
        in: formData
        name: term
        required: true
        type: string
      - description: Department ID
        example: 1
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: Course Code
        example: CENG304
        in: formData
        name: courseCode
        required: true
        type: string
      - description: Title
        example: '"Updated Lecture Notes - Week 5"'
        in: formData
        name: title
        required: true
        type: string
      - description: Content
        example: '"Updated detailed notes covering topic X..."'
        in: formData
        name: content
        required: true
        type: string
      - description: Optional new image file (replaces existing one)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Class note updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse'
              type: object
        "400":
          description: Bad Request (e.g., validation errors, invalid ID)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden (not owner)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a class note
      tags:
      - ClassNotes
  /class-notes/my-notes:
    get:
      consumes:
      - application/json
      description: Retrieves all class notes uploaded by the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: Your class notes retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ClassNoteResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized (handled by middleware)" // Middleware should
            handle this
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my class notes
      tags:
      - ClassNotes
  /department-instructors/{departmentId}:
    get:
      description: Get a list of instructors belonging to a specific department
      parameters:
      - description: Department ID
        format: int64
        in: path
        name: departmentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Instructors retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Instructor'
                  type: array
              type: object
        "400":
          description: Invalid Department ID format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get instructors by department
      tags:
      - instructors
  /departments:
    get:
      description: Get a list of all departments
      produces:
      - application/json
      responses:
        "200":
          description: Departments retrieved successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get all departments
      tags:
      - departments
    post:
      consumes:
      - application/json
      description: Create a new department with the provided data
      parameters:
      - description: Department information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "201":
          description: Department successfully created
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Faculty not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Department already exists
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Create a new department
      tags:
      - departments
  /departments/{id}:
    delete:
      description: Delete a department by ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Department successfully deleted
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Cannot delete department with associated data
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Delete a department
      tags:
      - departments
    get:
      description: Get department information by ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Department information retrieved successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get department by ID
      tags:
      - departments
    put:
      consumes:
      - application/json
      description: Update a department with the provided data
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated department information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Department'
      produces:
      - application/json
      responses:
        "200":
          description: Department successfully updated
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Department not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Update a department
      tags:
      - departments
  /faculties:
    get:
      description: Get a list of all faculties
      produces:
      - application/json
      responses:
        "200":
          description: Faculties retrieved successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get all faculties
      tags:
      - faculties
    post:
      consumes:
      - application/json
      description: Create a new faculty with the provided data
      parameters:
      - description: Faculty information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Faculty'
      produces:
      - application/json
      responses:
        "201":
          description: Faculty successfully created
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Faculty already exists
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Create a new faculty
      tags:
      - faculties
  /faculties/{id}:
    delete:
      description: Delete a faculty by ID
      parameters:
      - description: Faculty ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Faculty successfully deleted
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "404":
          description: Faculty not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "409":
          description: Cannot delete faculty with associated departments
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Delete a faculty
      tags:
      - faculties
    get:
      description: Get faculty information by ID
      parameters:
      - description: Faculty ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Faculty information retrieved successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "404":
          description: Faculty not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get faculty by ID
      tags:
      - faculties
    put:
      consumes:
      - application/json
      description: Update a faculty with the provided data
      parameters:
      - description: Faculty ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated faculty information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Faculty'
      produces:
      - application/json
      responses:
        "200":
          description: Faculty successfully updated
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Faculty not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Update a faculty
      tags:
      - faculties
  /faculty-departments/{facultyId}:
    get:
      description: Get a list of departments for a specific faculty
      parameters:
      - description: Faculty ID
        in: path
        name: facultyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Departments retrieved successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "404":
          description: Faculty not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get departments by faculty ID
      tags:
      - departments
  /instructors/{id}:
    get:
      description: Get public information about an instructor by their user ID
      parameters:
      - description: Instructor User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Instructor retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Instructor'
              type: object
        "400":
          description: Invalid Instructor ID format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Instructor not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get instructor by ID
      tags:
      - instructors
  /instructors/profile:
    get:
      description: Get detailed profile information for the currently authenticated
        instructor (Requires instructor role)
      produces:
      - application/json
      responses:
        "200":
          description: Instructor profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Instructor'
              type: object
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden - User is not an instructor or token invalid
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Instructor not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get instructor profile
      tags:
      - instructors
  /instructors/title:
    put:
      consumes:
      - application/json
      description: Update the academic title for the currently authenticated instructor
        (Requires instructor role)
      parameters:
      - description: New title information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.UpdateTitleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Instructor title updated successfully
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid request format or validation error (e.g., empty title)
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden - User is not an instructor or token invalid
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Instructor not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update instructor title
      tags:
      - instructors
  /pastexams:
    get:
      description: Get a list of all past exams. Supports filtering by faculty, department,
        course code, year, term and sorting by various fields.
      parameters:
      - description: Filter by faculty ID
        example: 1
        format: int64
        in: query
        name: facultyId
        type: integer
      - description: Filter by department ID
        example: 1
        format: int64
        in: query
        name: departmentId
        type: integer
      - description: Filter by course code (case-insensitive, partial match)
        example: CENG
        in: query
        name: courseCode
        type: string
      - description: Filter by exact year
        example: 2023
        in: query
        name: year
        type: integer
      - description: Filter by term
        enum:
        - FALL
        - SPRING
        example: FALL
        in: query
        name: term
        type: string
      - default: createdAt
        description: Sort field (year, term, courseCode, title, createdAt, updatedAt)
        in: query
        name: sortBy
        type: string
      - default: DESC
        description: Sort order
        enum:
        - ASC
        - DESC
        in: query
        name: sortOrder
        type: string
      - default: 0
        description: Page number for pagination (0-based)
        in: query
        minimum: 0
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Past exams retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PastExamListResponse'
              type: object
        "400":
          description: Invalid query parameter format or value
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get all past exams
      tags:
      - pastexams
    post:
      consumes:
      - multipart/form-data
      description: Create a new past exam with the provided data and optional file
        upload.
      parameters:
      - description: Year
        example: 2023
        in: formData
        name: year
        required: true
        type: integer
      - description: Term (FALL or SPRING)
        example: FALL
        in: formData
        name: term
        required: true
        type: string
      - description: Department ID
        example: 1
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: Course Code
        example: CENG301
        in: formData
        name: courseCode
        required: true
        type: string
      - description: Title
        example: '"Midterm Exam"'
        in: formData
        name: title
        required: true
        type: string
      - description: Content
        example: '"Exam content details..."'
        in: formData
        name: content
        required: true
        type: string
      - description: Optional exam file (PDF, image, etc.)
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Past exam successfully created
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PastExamResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden - User is not an instructor
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new past exam (Instructor only)
      tags:
      - pastexams
  /pastexams/{id}:
    delete:
      description: Delete a past exam by its ID. Requires instructor role and ownership.
      parameters:
      - description: Past Exam ID
        example: 1
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Past exam successfully deleted
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
        "400":
          description: Invalid Past Exam ID format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized - Invalid or missing token
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden - User is not an instructor or not the owner
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Past exam not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a past exam (Instructor only, Owner only)
      tags:
      - pastexams
    get:
      description: Get detailed information for a specific past exam by its ID.
      parameters:
      - description: Past Exam ID
        example: 1
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Past exam information retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PastExamResponse'
              type: object
        "400":
          description: Invalid Past Exam ID format
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Past exam not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      summary: Get past exam by ID
      tags:
      - pastexams
    put:
      consumes:
      - multipart/form-data
      description: Update an existing past exam. Requires instructor role and ownership.
        Can optionally include a new file.
      parameters:
      - description: Past Exam ID
        example: 1
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Year
        example: 2023
        in: formData
        name: year
        required: true
        type: integer
      - description: Term (FALL or SPRING)
        example: FALL
        in: formData
        name: term
        required: true
        type: string
      - description: Department ID
        example: 1
        in: formData
        name: departmentId
        required: true
        type: integer
      - description: Course Code
        example: CENG301
        in: formData
        name: courseCode
        required: true
        type: string
      - description: Title
        example: '"Midterm 1 - Updated"'
        in: formData
        name: title
        required: true
        type: string
      - description: Content
        example: '"Updated exam content..."'
        in: formData
        name: content
        required: true
        type: string
      - description: Optional new exam file (replaces existing one)
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Past exam successfully updated
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.PastExamResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "403":
          description: Forbidden - User is not an instructor or not the owner
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "404":
          description: Past exam not found
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yigit_unisphere_internal_app_models_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a past exam (Instructor only, Owner only)
      tags:
      - pastexams
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Enter your JWT token (without Bearer prefix)
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
