// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://www.unisphere.com/support",
            "email": "support@unisphere.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get profile information for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserProfile"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update profile information for authenticated user (name, email)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserProfile"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/profile/photo": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload or update a user's profile photo",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Update profile photo",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile photo",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile photo updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserProfile"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid file format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user's profile photo",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Delete profile photo",
                "responses": {
                    "200": {
                        "description": "Profile photo deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UserProfile"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Generate new access and refresh tokens using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh authentication token",
                "parameters": [
                    {
                        "description": "Refresh token information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register-instructor": {
            "post": {
                "description": "Create a new instructor account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new instructor",
                "parameters": [
                    {
                        "description": "Instructor registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterInstructorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instructor successfully registered",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register-student": {
            "post": {
                "description": "Create a new student account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new student",
                "parameters": [
                    {
                        "description": "Student registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterStudentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Student successfully registered",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email or student ID already in use",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/class-notes": {
            "get": {
                "description": "Retrieves a list of class notes with optional filtering and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Get all class notes",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Filter by Faculty ID",
                        "name": "facultyId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Filter by Department ID",
                        "name": "departmentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "CENG304",
                        "description": "Filter by Course Code",
                        "name": "courseCode",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 2024,
                        "description": "Filter by Year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "SPRING",
                        "description": "Filter by Term (FALL or SPRING)",
                        "name": "term",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "createdAt",
                        "description": "Sort field (createdAt, year, term, courseCode, title)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "DESC",
                        "description": "Sort order (ASC or DESC)",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Page number (0-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Class notes retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ClassNoteListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid query parameters)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new class note with the optional file upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Create a new class note",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 2024,
                        "description": "Year",
                        "name": "year",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "SPRING",
                        "description": "Term (FALL or SPRING)",
                        "name": "term",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Department ID",
                        "name": "departmentId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "CENG304",
                        "description": "Course Code",
                        "name": "courseCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Lecture Notes - Week 5\"",
                        "description": "Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"These notes cover...\"",
                        "description": "Content",
                        "name": "content",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Files to upload (PDFs, images, etc.)",
                        "name": "files",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Class note created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ClassNoteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing or invalid token)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not permitted to create)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/class-notes/my-notes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all class notes uploaded by the currently authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Get my class notes",
                "responses": {
                    "200": {
                        "description": "Your class notes retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.ClassNoteResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized (handled by middleware)\" // Middleware should handle this",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/class-notes/{noteId}": {
            "get": {
                "description": "Retrieves a specific class note by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Get class note by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 15,
                        "description": "Class Note ID",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Class note retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ClassNoteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid ID)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a class note that the user owns",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Update an existing class note",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 15,
                        "description": "Class Note ID",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 2024,
                        "description": "Year",
                        "name": "year",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "SPRING",
                        "description": "Term (FALL or SPRING)",
                        "name": "term",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Department ID",
                        "name": "departmentId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "CENG304",
                        "description": "Course Code",
                        "name": "courseCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Updated Lecture Notes - Week 5\"",
                        "description": "Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Updated notes...\"",
                        "description": "Content",
                        "name": "content",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Files to upload (PDFs, images, etc.)",
                        "name": "files",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "\"1,2,3\"",
                        "description": "Comma-separated list of file IDs to remove",
                        "name": "removeFileIds",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Class note updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ClassNoteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (missing or invalid token)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not the owner of the note)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found (class note doesn't exist)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing class note. Requires authentication and ownership.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ClassNotes"
                ],
                "summary": "Delete a class note",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 15,
                        "description": "Class Note ID to delete",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Class note deleted successfully\" // Changed data type",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SuccessResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid ID)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (handled by middleware)\" // Middleware should handle this",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/department-instructors/{departmentId}": {
            "get": {
                "description": "Get a list of instructors belonging to a specific department",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "instructors"
                ],
                "summary": "Get instructors by department",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Department ID",
                        "name": "departmentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instructors retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Instructor"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Department ID format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/departments": {
            "get": {
                "description": "Get a list of all departments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get all departments",
                "responses": {
                    "200": {
                        "description": "Departments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new department with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Create a new department",
                "parameters": [
                    {
                        "description": "Department information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Department successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Department already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/departments/{id}": {
            "get": {
                "description": "Get department information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get department by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a department with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Update a department",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated department information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Department"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department successfully updated",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a department by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Delete a department",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Department ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Department successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Department not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete department with associated data",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculties": {
            "get": {
                "description": "Get a list of all faculties",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Get all faculties",
                "responses": {
                    "200": {
                        "description": "Faculties retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new faculty with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Create a new faculty",
                "parameters": [
                    {
                        "description": "Faculty information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Faculty"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Faculty successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Faculty already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculties/{id}": {
            "get": {
                "description": "Get faculty information by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Get faculty by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a faculty with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Update a faculty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated faculty information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Faculty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty successfully updated",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a faculty by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "faculties"
                ],
                "summary": "Delete a faculty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Faculty successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cannot delete faculty with associated departments",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/faculty-departments/{facultyId}": {
            "get": {
                "description": "Get a list of departments for a specific faculty",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "departments"
                ],
                "summary": "Get departments by faculty ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Faculty ID",
                        "name": "facultyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Departments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Faculty not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/instructors/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed profile information for the currently authenticated instructor (Requires instructor role)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "instructors"
                ],
                "summary": "Get instructor profile",
                "responses": {
                    "200": {
                        "description": "Instructor profile retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Instructor"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not an instructor or token invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instructor not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/instructors/title": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the academic title for the currently authenticated instructor (Requires instructor role)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "instructors"
                ],
                "summary": "Update instructor title",
                "parameters": [
                    {
                        "description": "New title information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTitleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instructor title updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error (e.g., empty title)",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not an instructor or token invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instructor not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/instructors/{id}": {
            "get": {
                "description": "Get public information about an instructor by their user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "instructors"
                ],
                "summary": "Get instructor by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Instructor User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instructor retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Instructor"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Instructor ID format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Instructor not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pastexams": {
            "get": {
                "description": "Get a list of all past exams. Supports filtering by faculty, department, course code, year, term and sorting by various fields.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Get all past exams",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Filter by faculty ID",
                        "name": "facultyId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Filter by department ID",
                        "name": "departmentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "CENG",
                        "description": "Filter by course code (case-insensitive, partial match)",
                        "name": "courseCode",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 2023,
                        "description": "Filter by exact year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "FALL",
                            "SPRING"
                        ],
                        "type": "string",
                        "example": "FALL",
                        "description": "Filter by term",
                        "name": "term",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "createdAt",
                        "description": "Sort field (year, term, courseCode, title, createdAt, updatedAt)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "default": "DESC",
                        "description": "Sort order",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Page number for pagination (0-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exams retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PastExamListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter format or value",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new past exam with the provided data and optional file upload.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Create a new past exam (Instructor only)",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 2023,
                        "description": "Year",
                        "name": "year",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "FALL",
                        "description": "Term (FALL or SPRING)",
                        "name": "term",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Department ID",
                        "name": "departmentId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "CENG301",
                        "description": "Course Code",
                        "name": "courseCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Midterm Exam\"",
                        "description": "Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Exam content details...\"",
                        "description": "Content",
                        "name": "content",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Exam files (PDF, image, etc.)",
                        "name": "files",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Past exam successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PastExamResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not an instructor",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pastexams/{id}": {
            "get": {
                "description": "Get detailed information for a specific past exam by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Get past exam by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam information retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PastExamResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid Past Exam ID format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing past exam with the provided data and optional new file upload.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Update a past exam (Instructor only)",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 2023,
                        "description": "Year",
                        "name": "year",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "FALL",
                        "description": "Term (FALL or SPRING)",
                        "name": "term",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Department ID",
                        "name": "departmentId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "CENG301",
                        "description": "Course Code",
                        "name": "courseCode",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Midterm 1 - Updated\"",
                        "description": "Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"Updated exam content...\"",
                        "description": "Content",
                        "name": "content",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Exam files (PDF, image, etc.)",
                        "name": "files",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "\"1,2,3\"",
                        "description": "Comma-separated list of file IDs to remove",
                        "name": "removeFileIds",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PastExamResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission to update this exam",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a past exam by its ID. Requires instructor role and ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pastexams"
                ],
                "summary": "Delete a past exam (Instructor only, Owner only)",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "Past Exam ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Past exam successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Past Exam ID format",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not an instructor or not the owner",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Past exam not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Use specific DTOs for data structure"
                },
                "error": {
                    "description": "Include error details if Success is false",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ErrorDetail"
                        }
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "description": "Timestamp of the response",
                    "type": "string",
                    "example": "2025-04-23T12:01:05.123Z"
                }
            }
        },
        "dto.ClassNoteListResponse": {
            "type": "object",
            "properties": {
                "notes": {
                    "description": "List of class note details for the current page",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ClassNoteResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PaginationInfo"
                        }
                    ]
                }
            }
        },
        "dto.ClassNoteResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Main content of the note",
                    "type": "string",
                    "example": "Detailed notes covering topic X..."
                },
                "courseCode": {
                    "description": "Course code",
                    "type": "string",
                    "example": "CENG304"
                },
                "createdAt": {
                    "description": "Timestamp when the note was created",
                    "type": "string",
                    "example": "2024-01-15T10:00:00Z"
                },
                "departmentId": {
                    "description": "ID of the department for the course",
                    "type": "integer",
                    "example": 1
                },
                "departmentName": {
                    "description": "Name of the department",
                    "type": "string",
                    "example": "Computer Engineering"
                },
                "facultyId": {
                    "description": "ID of the faculty associated with the department",
                    "type": "integer",
                    "example": 1
                },
                "facultyName": {
                    "description": "Name of the faculty",
                    "type": "string",
                    "example": "Engineering Faculty"
                },
                "files": {
                    "description": "Files attached to the note (new field for multiple files)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FileResponse"
                    }
                },
                "id": {
                    "description": "Unique identifier for the class note",
                    "type": "integer",
                    "example": 15
                },
                "term": {
                    "description": "Term (FALL or SPRING)",
                    "type": "string",
                    "example": "SPRING"
                },
                "title": {
                    "description": "Title of the class note",
                    "type": "string",
                    "example": "Lecture Notes - Week 5"
                },
                "updatedAt": {
                    "description": "Timestamp when the note was last updated",
                    "type": "string",
                    "example": "2024-01-16T11:30:00Z"
                },
                "uploadedByStudent": {
                    "description": "True if uploaded by a student, false if by an instructor",
                    "type": "boolean",
                    "example": true
                },
                "uploaderEmail": {
                    "description": "Email of the user who uploaded the note",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "uploaderName": {
                    "description": "Name of the user who uploaded the note",
                    "type": "string",
                    "example": "John Doe"
                },
                "year": {
                    "description": "Year the note corresponds to",
                    "type": "integer",
                    "example": 2024
                }
            }
        },
        "dto.ErrorCode": {
            "type": "string",
            "enum": [
                "AUTH_001",
                "AUTH_002",
                "AUTH_003",
                "AUTH_004",
                "AUTH_005",
                "AUTH_006",
                "AUTH_007",
                "AUTH_008",
                "RES_001",
                "RES_002",
                "RES_003",
                "VAL_001",
                "SRV_001",
                "SRV_002",
                "SRV_003",
                "BAD_REQUEST",
                "FORBIDDEN"
            ],
            "x-enum-varnames": [
                "ErrorCodeInvalidCredentials",
                "ErrorCodeInvalidEmail",
                "ErrorCodeInvalidPassword",
                "ErrorCodeInvalidStudentID",
                "ErrorCodeInvalidToken",
                "ErrorCodeExpiredToken",
                "ErrorCodeTokenNotFound",
                "ErrorCodeUnauthorized",
                "ErrorCodeResourceNotFound",
                "ErrorCodeResourceAlreadyExists",
                "ErrorCodeResourceInvalid",
                "ErrorCodeValidationFailed",
                "ErrorCodeInternalServer",
                "ErrorCodeDatabaseError",
                "ErrorCodeExternalServiceError",
                "ErrorCodeBadRequest",
                "ErrorCodeForbidden"
            ]
        },
        "dto.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ErrorCode"
                        }
                    ],
                    "example": "AUTH_001"
                },
                "debugInfo": {
                    "type": "string"
                },
                "details": {},
                "field": {
                    "type": "string",
                    "example": "email"
                },
                "message": {
                    "type": "string",
                    "example": "Email format is invalid, school email required"
                },
                "severity": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ErrorSeverity"
                        }
                    ],
                    "example": "ERROR"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/dto.ErrorDetail"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-04-23T12:01:05.123Z"
                }
            }
        },
        "dto.ErrorSeverity": {
            "type": "string",
            "enum": [
                "INFO",
                "WARNING",
                "ERROR",
                "CRITICAL"
            ],
            "x-enum-varnames": [
                "ErrorSeverityInfo",
                "ErrorSeverityWarning",
                "ErrorSeverityError",
                "ErrorSeverityCritical"
            ]
        },
        "dto.FileResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp when the file was created",
                    "type": "string",
                    "example": "2024-01-15T10:00:00Z"
                },
                "fileName": {
                    "description": "Name of the file",
                    "type": "string",
                    "example": "lecture_slides.pdf"
                },
                "fileSize": {
                    "description": "Size of the file in bytes",
                    "type": "integer",
                    "example": 1048576
                },
                "fileType": {
                    "description": "MIME type of the file",
                    "type": "string",
                    "example": "application/pdf"
                },
                "fileUrl": {
                    "description": "URL to access the file",
                    "type": "string",
                    "example": "http://example.com/uploads/123"
                },
                "id": {
                    "description": "Unique identifier for the file",
                    "type": "integer",
                    "example": 123
                },
                "resourceType": {
                    "description": "Type of resource this file is attached to",
                    "type": "string",
                    "example": "PAST_EXAM"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's registered email address",
                    "type": "string",
                    "example": "user@school.edu.tr"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "Password123"
                }
            }
        },
        "dto.PaginationInfo": {
            "type": "object",
            "properties": {
                "currentPage": {
                    "description": "Current page number (0-based)",
                    "type": "integer",
                    "example": 0
                },
                "pageSize": {
                    "description": "Number of items per page",
                    "type": "integer",
                    "example": 10
                },
                "totalItems": {
                    "description": "Total number of items matching the query",
                    "type": "integer",
                    "example": 48
                },
                "totalPages": {
                    "description": "Total number of pages available",
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.PastExamListResponse": {
            "type": "object",
            "properties": {
                "exams": {
                    "description": "List of past exam details for the current page",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PastExamResponse"
                    }
                },
                "pagination": {
                    "description": "Pagination metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PaginationInfo"
                        }
                    ]
                }
            }
        },
        "dto.PastExamResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Detailed content or description of the exam",
                    "type": "string",
                    "example": "Exam content details..."
                },
                "courseCode": {
                    "description": "Course code",
                    "type": "string",
                    "example": "CENG301"
                },
                "createdAt": {
                    "description": "Creation timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:00:00Z"
                },
                "departmentId": {
                    "description": "ID of the department for the course",
                    "type": "integer",
                    "example": 1
                },
                "departmentName": {
                    "description": "Name of the department",
                    "type": "string",
                    "example": "Computer Engineering"
                },
                "facultyId": {
                    "description": "ID of the faculty associated with the department",
                    "type": "integer",
                    "example": 1
                },
                "facultyName": {
                    "description": "Name of the faculty",
                    "type": "string",
                    "example": "Engineering Faculty"
                },
                "files": {
                    "description": "Files attached to the exam (new field for multiple files)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FileResponse"
                    }
                },
                "id": {
                    "description": "Unique identifier for the past exam",
                    "type": "integer",
                    "example": 10
                },
                "instructorName": {
                    "description": "Name of the instructor who uploaded the exam",
                    "type": "string",
                    "example": "Jane Smith"
                },
                "term": {
                    "description": "Term the exam was held (FALL or SPRING)",
                    "type": "string",
                    "example": "FALL"
                },
                "title": {
                    "description": "Title of the exam",
                    "type": "string",
                    "example": "Midterm 1"
                },
                "updatedAt": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2024-01-16T11:30:00Z"
                },
                "uploadedByEmail": {
                    "description": "Email of the instructor who uploaded the exam",
                    "type": "string",
                    "example": "instructor@school.edu.tr"
                },
                "year": {
                    "description": "Year the exam was held",
                    "type": "integer",
                    "example": 2023
                }
            }
        },
        "dto.ProfilePhoto": {
            "type": "object",
            "properties": {
                "fileType": {
                    "description": "File MIME type",
                    "type": "string",
                    "example": "image/jpeg"
                },
                "id": {
                    "description": "File ID",
                    "type": "integer",
                    "example": 4
                },
                "url": {
                    "description": "File URL",
                    "type": "string",
                    "example": "http://example.com/uploads/profile.jpg"
                }
            }
        },
        "dto.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "The refresh token obtained during login",
                    "type": "string",
                    "example": "your_refresh_token_here"
                }
            }
        },
        "dto.RegisterInstructorRequest": {
            "type": "object",
            "required": [
                "departmentId",
                "email",
                "firstName",
                "lastName",
                "password",
                "title"
            ],
            "properties": {
                "departmentId": {
                    "description": "ID of the department the instructor belongs to",
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "description": "Instructor's email address (must be unique)",
                    "type": "string",
                    "example": "instructor@school.edu.tr"
                },
                "firstName": {
                    "description": "Instructor's first name",
                    "type": "string",
                    "example": "Jane"
                },
                "lastName": {
                    "description": "Instructor's last name",
                    "type": "string",
                    "example": "Smith"
                },
                "password": {
                    "description": "Instructor's password (min 8 characters, letter+number required by service)",
                    "type": "string",
                    "minLength": 8,
                    "example": "Password123"
                },
                "title": {
                    "description": "Instructor's academic title (e.g., Professor, Dr.)",
                    "type": "string",
                    "example": "Professor"
                }
            }
        },
        "dto.RegisterStudentRequest": {
            "type": "object",
            "required": [
                "departmentId",
                "email",
                "firstName",
                "lastName",
                "password",
                "studentId"
            ],
            "properties": {
                "departmentId": {
                    "description": "ID of the department the student belongs to",
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "description": "Student's email address (must be unique)",
                    "type": "string",
                    "example": "student@school.edu.tr"
                },
                "firstName": {
                    "description": "Student's first name",
                    "type": "string",
                    "example": "John"
                },
                "graduationYear": {
                    "description": "Student's expected graduation year (optional)",
                    "type": "integer",
                    "minimum": 1900,
                    "example": 2025
                },
                "lastName": {
                    "description": "Student's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "description": "Student's password (min 8 characters, letter+number required by service)",
                    "type": "string",
                    "minLength": 8,
                    "example": "Password123"
                },
                "studentId": {
                    "description": "Student's unique 8-digit ID",
                    "type": "string",
                    "example": "12345678"
                }
            }
        },
        "dto.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Resource deleted successfully"
                }
            }
        },
        "dto.UpdateTitleRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserProfileRequest": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@school.edu.tr"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "dto.UserProfile": {
            "type": "object",
            "properties": {
                "departmentId": {
                    "description": "Department and Faculty information - flattened for easier access",
                    "type": "integer",
                    "example": 1
                },
                "departmentName": {
                    "description": "Department name",
                    "type": "string",
                    "example": "Computer Engineering"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@school.edu.tr"
                },
                "facultyId": {
                    "description": "Faculty ID",
                    "type": "integer",
                    "example": 1
                },
                "facultyName": {
                    "description": "Faculty name",
                    "type": "string",
                    "example": "Engineering Faculty"
                },
                "firstName": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "graduationYear": {
                    "description": "Student's expected graduation year (optional, only for students)",
                    "type": "integer",
                    "example": 2025
                },
                "id": {
                    "description": "Unique identifier for the user",
                    "type": "integer",
                    "example": 1
                },
                "identifier": {
                    "description": "Student or instructor specific fields",
                    "type": "string",
                    "example": "12345678"
                },
                "lastName": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "profilePhoto": {
                    "description": "Profile photo information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ProfilePhoto"
                        }
                    ]
                },
                "profilePhotoFileId": {
                    "description": "ID of the profile photo file",
                    "type": "integer",
                    "example": 123
                },
                "roleType": {
                    "description": "User's role (STUDENT or INSTRUCTOR)",
                    "type": "string",
                    "enum": [
                        "STUDENT",
                        "INSTRUCTOR"
                    ],
                    "example": "STUDENT"
                },
                "title": {
                    "description": "Instructor's academic title (only for instructors)",
                    "type": "string",
                    "example": "Professor"
                }
            }
        },
        "models.Department": {
            "type": "object",
            "required": [
                "code",
                "faculty_id",
                "name"
            ],
            "properties": {
                "code": {
                    "description": "Unique code for the department (e.g., CENG, EEE, MATH)",
                    "type": "string",
                    "example": "CENG"
                },
                "faculty": {
                    "description": "Associated faculty details (populated in some responses)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Faculty"
                        }
                    ]
                },
                "faculty_id": {
                    "description": "ID of the faculty this department belongs to (required)",
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "description": "Unique identifier for the department",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name of the department (required)",
                    "type": "string",
                    "example": "Computer Engineering"
                }
            }
        },
        "models.Faculty": {
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "description": "Unique code for the faculty (e.g., ENG, SCI)",
                    "type": "string",
                    "example": "ENG"
                },
                "description": {
                    "description": "Optional description of the faculty",
                    "type": "string",
                    "example": "Faculty of Engineering and Natural Sciences"
                },
                "id": {
                    "description": "Unique identifier for the faculty",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name of the faculty (required)",
                    "type": "string",
                    "example": "Engineering Faculty"
                }
            }
        },
        "models.Instructor": {
            "type": "object",
            "properties": {
                "department": {
                    "description": "Relation, no db tag",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Department"
                        }
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "user": {
                    "description": "Relation, no db tag",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "models.RoleType": {
            "type": "string",
            "enum": [
                "STUDENT",
                "INSTRUCTOR"
            ],
            "x-enum-comments": {
                "RoleInstructor": "Original name",
                "RoleStudent": "Original name"
            },
            "x-enum-varnames": [
                "RoleStudent",
                "RoleInstructor"
            ]
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp when the user was created",
                    "type": "string",
                    "example": "2024-01-01T10:00:00Z"
                },
                "departmentId": {
                    "description": "User's department (nullable)",
                    "type": "integer",
                    "example": 1
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@school.edu.tr"
                },
                "firstName": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "Unique identifier for the user",
                    "type": "integer",
                    "example": 1
                },
                "isActive": {
                    "description": "Whether the user account is active",
                    "type": "boolean",
                    "example": true
                },
                "lastLoginAt": {
                    "description": "Timestamp of the last login (nullable)",
                    "type": "string",
                    "example": "2024-04-20T18:00:00Z"
                },
                "lastName": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "profilePhotoFileId": {
                    "description": "Profile photo file ID (nullable)",
                    "type": "integer"
                },
                "roleType": {
                    "description": "User's role (STUDENT or INSTRUCTOR)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.RoleType"
                        }
                    ],
                    "example": "STUDENT"
                },
                "updatedAt": {
                    "description": "Timestamp when the user was last updated",
                    "type": "string",
                    "example": "2024-01-02T15:30:00Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Enter your JWT token (without Bearer prefix)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "UniSphere API",
	Description:      "API for UniSphere university social platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
